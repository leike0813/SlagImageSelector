import PySide2.QtWidgets as QtW, PySide2.QtCore as QtC
from qtconsole.rich_jupyter_widget import RichJupyterWidget
from qtconsole.inprocess import QtInProcessKernelManager

__all__ = ['QIPythonConsoleWidget']


class QIPythonConsoleWidget(QtW.QWidget):


    def __init__(self, mainWindow, qWidget, parent = None):
        super(QIPythonConsoleWidget, self).__init__(parent)
        self.setupUi()
        self.mainWindow = mainWindow
        self.qWidget = qWidget
        self.qwidgetLabel.setText(self.qWidget.__repr__())
        self.ipyConsoleWidget = QIPythonWidget(customBanner="控制台已开启。\n")
        self.consoleGroupBox.layout().addWidget(self.ipyConsoleWidget)
        self.push \
            ({"Mainwindow": self.mainWindow, "mw": self.mainWindow, "CurrentWidget": self.qWidget, "cw": self.qWidget, 'self': self})

        self.clearPushButton.pressed.connect(self.ipyConsoleWidget.clearTerminal)
        self.closePushButton.pressed.connect(self.close)

    def setupUi(self):
        """
        Generated by QtDesigner
        """
        self.setObjectName("ConsoleWidget")
        self.setWindowModality(QtC.Qt.WindowModal)
        self.resize(800, 600)
        self.verticalLayout_2 = QtW.QVBoxLayout(self)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox = QtW.QGroupBox(self)
        sizePolicy = QtW.QSizePolicy(QtW.QSizePolicy.Expanding, QtW.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout_3 = QtW.QHBoxLayout(self.groupBox)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.qwidgetLabel = QtW.QLabel(self.groupBox)
        sizePolicy = QtW.QSizePolicy(QtW.QSizePolicy.Expanding, QtW.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.qwidgetLabel.sizePolicy().hasHeightForWidth())
        self.qwidgetLabel.setSizePolicy(sizePolicy)
        self.qwidgetLabel.setText("")
        self.qwidgetLabel.setObjectName("qwidgetLabel")
        self.horizontalLayout_3.addWidget(self.qwidgetLabel)
        self.verticalLayout_2.addWidget(self.groupBox)
        self.consoleGroupBox = QtW.QGroupBox(self)
        sizePolicy = QtW.QSizePolicy(QtW.QSizePolicy.Expanding, QtW.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.consoleGroupBox.sizePolicy().hasHeightForWidth())
        self.consoleGroupBox.setSizePolicy(sizePolicy)
        self.consoleGroupBox.setObjectName("consoleGroupBox")
        self.verticalLayout = QtW.QVBoxLayout(self.consoleGroupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.verticalLayout_2.addWidget(self.consoleGroupBox)
        self.horizontalLayout_2 = QtW.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtW.QLayout.SetMinimumSize)
        self.horizontalLayout_2.setContentsMargins(10, 0, 10, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem = QtW.QSpacerItem(40, 20, QtW.QSizePolicy.Expanding, QtW.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.clearPushButton = QtW.QPushButton(self)
        self.clearPushButton.setObjectName("clearPushButton")
        self.horizontalLayout_2.addWidget(self.clearPushButton)
        self.closePushButton = QtW.QPushButton(self)
        self.closePushButton.setObjectName("closePushButton")
        self.horizontalLayout_2.addWidget(self.closePushButton)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.verticalLayout_2.setStretch(0, 3)
        self.verticalLayout_2.setStretch(1, 29)
        self.verticalLayout_2.setStretch(2, 4)

        _translate = QtC.QCoreApplication.translate
        self.setWindowTitle(_translate("ConsoleWidget", "控制台"))
        self.groupBox.setTitle(_translate("ConsoleWidget",
                    "父窗口（可用‘CurrentWidget’或‘cw’访问；访问程序主窗口可用‘Mainwindow’或‘mw’；访问控制台自身可用‘self’）"))
        self.consoleGroupBox.setTitle(_translate("ConsoleWidget", "控制台"))
        self.clearPushButton.setText(_translate("ConsoleWidget", "清空"))
        self.closePushButton.setText(_translate("ConsoleWidget", "关闭"))

        QtC.QMetaObject.connectSlotsByName(self)

    def push(self, variableDict):
        self.ipyConsoleWidget.pushVariables(variableDict)

    def switchCurrentWidget(self, qWidget):
        self.qWidget = qWidget
        self.qwidgetLabel.setText(self.qWidget.__repr__())
        self.push({"CurrentWidget": self.qWidget, "cw": self.qWidget})

class QIPythonWidget(RichJupyterWidget):
    """ Convenience class for a live IPython console widget. We can replace the standard banner using the customBanner argument"""
    def __init__(self, customBanner=None, *args, **kwargs):
        super(QIPythonWidget, self).__init__(*args, **kwargs)
        if customBanner !=None: self.banner = customBanner
        self.kernel_manager = kernel_manager = QtInProcessKernelManager()
        kernel_manager.start_kernel()
        kernel_manager.kernel.gui = 'qt'
        self.kernel_client = kernel_client = self._kernel_manager.client()
        kernel_client.start_channels()

        def stop():
            kernel_client.stop_channels()
            kernel_manager.shutdown_kernel()
            QIPythonWidget.get_app_qt5().exit()
        self.exit_requested.connect(stop)

    def pushVariables(self, variableDict):
        """ Given a dictionary containing name / value pairs, push those variables to the IPython console widget """
        self.kernel_manager.kernel.shell.push(variableDict)
    def clearTerminal(self):
        """ Clears the terminal """
        self._control.clear()
    def printText(self ,text):
        """ Prints some plain text to the console """
        self._append_plain_text(text)
    def executeCommand(self ,command):
        """ Execute a command in the frame of the console widget """
        self._execute(command ,False)

    @staticmethod
    def get_app_qt5(*args, **kwargs):
        """Create a new qt5 app or return an existing one."""
        app = QtW.QApplication.instance()
        if app is None:
            if not args:
                args = ([''],)
            app = QtW.QApplication(*args, **kwargs)
        return app